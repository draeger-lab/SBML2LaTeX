/*
    SBML2LaTeX converts SBML files (http://sbml.org) into LaTeX files.
    Copyright (C) 2009 ZBIT, University of Tübingen, Andreas Dräger

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sbml.displaysbml;

import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.StringTokenizer;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;

/**
 * @author Andreas Dr&auml;ger <a
 *         href="mailto:andreas.draeger@uni-tuebingen.de">
 *         andreas.draeger@uni-tuebingen.de</a>
 * 
 */
public class PDFLaTeXPanel extends JPanel implements ActionListener {

	/**
	 * Generated Serial Version UID.
	 */
	private static final long serialVersionUID = 5555495319455091558L;
	private JTextField pdfTF;
	private JTextField compilerTF;
	private JButton browseButton;

	/**
	 * @param laTeXCompiler
	 * 
	 */
	public PDFLaTeXPanel(String laTeXCompiler, String texFile) {
		super();
		GridBagLayout layout = new GridBagLayout();
		setLayout(layout);
		compilerTF = new JTextField(laTeXCompiler == null ? "" : laTeXCompiler,
				25);
		pdfTF = new JTextField(texFile.substring(0, texFile.lastIndexOf('.'))
				+ ".pdf", 15);
		browseButton = new JButton("Save", UIManager
				.getIcon("FileView.floppyDriveIcon"));
		browseButton.addActionListener(this);
		LayoutHelper.addComponent(this, layout, new JLabel(
				"Path to PDFLaTeX compiler: "), 0, 0, 1, 1, 0, 1);
		LayoutHelper.addComponent(this, layout, compilerTF, 1, 0, 2, 1, 0, 0);
		LayoutHelper.addComponent(this, layout,
				new JLabel("Path of PDF output file: "), 0, 1, 1, 1, 0, 1);
		LayoutHelper.addComponent(this, layout, pdfTF, 1, 1, 1, 1, 1, 0);
		LayoutHelper.addComponent(this, layout, browseButton, 2, 1, 1, 1, 0, 0);
		JPanel info = new JPanel();
		info
				.add(new JLabel(
						toHTML(
								"<p>Sometimes (PDF-) LaTeX is unable to compile the LaTeX file generated by SBML2LaTeX. The reason is that it is sometimes unable to deal with a high number of tables. You can solve this problem by recompiling PDFLaTeX on your system with a higher number of available memory. If you encounter this problem, please have a look into the LaTeX documentation and installation process.</p>"
										+ "<p>In other cases it may happen that your LaTeX installation is lacking some of the required packages or that paths in the LaTeX source file are no longer correct because, for instance, the SBML2LaTeX logo file was moved to a different place. In those cases please try to compile the resulting TeX file manually.</p>",
								80)));
		info.setBorder(BorderFactory.createTitledBorder(" Please note "));
		LayoutHelper.addComponent(this, layout, info, 0, 3, 3, 1, 1, 1);
	}

	/**
	 * Returns a HTML formated String, in which each line is at most lineBreak
	 * symbols long.
	 * 
	 * @param string
	 * @param lineBreak
	 * @return
	 */
	public static String toHTML(String string, int lineBreak) {
		StringTokenizer st = new StringTokenizer(string != null ? string : "",
				" ");
		StringBuilder sb = new StringBuilder();
		if (st.hasMoreElements())
			sb.append(st.nextElement().toString());
		int length = sb.length();
		sb.insert(0, "<html><body>");
		while (st.hasMoreElements()) {
			if (length >= lineBreak && lineBreak < Integer.MAX_VALUE) {
				sb.append("<br>");
				length = 0;
			} else
				sb.append(' ');
			String tmp = st.nextElement().toString();
			length += tmp.length() + 1;
			sb.append(tmp);
		}
		sb.append("</body></html>");
		return sb.toString();
	}

	/**
	 * 
	 * @return
	 */
	public String getLaTeXCompiler() {
		return compilerTF.getText();
	}

	/**
	 * 
	 * @return
	 */
	public String getPDFFile() {
		return pdfTF.getText();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		JFileChooser chooser = new JFileChooser(System.getProperty("user.home"));
		if (pdfTF.getText().length() > 0) {
			File f = new File(getPDFFile());
			if (f.exists())
				chooser.setCurrentDirectory(f.getParentFile());
			else
				pdfTF.setText("");
		}
		chooser.setFileFilter(new FileFilter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see javax.swing.filechooser.FileFilter#accept(java.io.File)
			 */
			@Override
			public boolean accept(File f) {
				return f.getName().toLowerCase().endsWith(".pdf");
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see javax.swing.filechooser.FileFilter#getDescription()
			 */
			@Override
			public String getDescription() {
				return "PDF files (*.pdf)";
			}
		});
		chooser.setAcceptAllFileFilterUsed(false);
		chooser.setMultiSelectionEnabled(false);
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
			pdfTF.setText(chooser.getSelectedFile().getAbsolutePath());
	}

}
