<?xml version="1.0"?>
<!-- $Id: build.xml 252 2013-03-14 11:00:48Z draeger $ -->

<project default ="usage" basedir=".">	
	
	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->

	<target
	 name="init"
	 description="Initialization target"
	>
		<tstamp>
			<format property="YEAR" pattern="yyyy"/>
		</tstamp>

		<property name="Name" value="SBML2LaTeX"/>
		<property name="name" value="SBML2LaTeX"/>
		<property name="version" value="1.0"/>
		<property name="api.version" value="1.0"/>

		<property name="year" value="${YEAR}"/>

		<echo message="----------- ${Name} ${version} [${year}] ------------"/>
		<echo message="-----------     ${TODAY}   ------------"/>
		<echo message="-----------     ${DSTAMP} ${TSTAMP}  ------------"/>

		<property environment="env"/>
		<property name="build.compiler" value="modern"/>
		<property name="build.sysclasspath" value="ignore"/>
		<property name="debug" value="on"/>
		<property name="optimize" value="on"/>
		<property name="deprecation" value="false"/>
		<property name="depend" value="true"/>
		<property name="verbose" value="true"/>

		<property name="build.number" value="${DSTAMP}-${TSTAMP}"/>
		<property name="build.name" value="${version} (build ${build.number})"/>

		<property name="src.dir" value="${basedir}/src"/>
		<property name="test.src.dir" value="${basedir}/test"/>
		<property name="build.dir" value="${basedir}/build"/>
		<property name="build.src" value="${basedir}/build/src"/>
		<property name="build.dest" value="${basedir}/build/classes"/>
		<property name="jars.dir" value="${basedir}/lib"/>
		<property name="dist.root" value="${basedir}/dist"/>
		<property name="dist.dir" value="${dist.root}/${name}-${version}"/>
		<property name="package.dir" value="${basedir}/build/package"/>
		<property name="resource.dir" value="${basedir}/resources"/>

		<filter token="year" value="${year}"/>
		<filter token="version" value="${version}"/>
		<filter token="date" value="${TODAY}"/>
		<filter token="log" value="true"/>
		<filter token="verbose" value="true"/>

		<!-- add everything needed to the classpath -->
		<!-- adjust the settings to your local environment -->
		<path id="classpath">
			<fileset dir="${jars.dir}" includes="*.jar *.zip">
			</fileset>
		</path>	

		<property name="lib" location="${basedir}/lib"/>
	    <property name="classes" location="${basedir}/bin"/>
		<property name="dist" location="${basedir}/dist"/>
		<property name="JAR_Name" value="${Name}"/>
	  	<property name="appJar" value="${dist}/${JAR_Name}"/>
	  	<property name="doc" location="${basedir}/doc/api"/>
		
	</target>

	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target
	 name="usage"
	 depends="init"
	 description="Displays a help message (usage)"
	>
		<echo message=""/>
		<echo message=""/>
		<echo message=" ${Name} Build file"/>
		<echo message=" -------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=" available targets are:"/>
		<echo message=""/>
		<echo message="   compile     --> compiles the source code"/>
		<echo message="   jar         --> generates the ${name}.jar file"/>
		<echo message="   bigjar      --> generates the ${name}-with-dependencies.jar file"/>
		<echo message="   javadoc     --> generates the API documentation"/>
		<echo message="   clean       --> cleans up the directory"/>
		<echo message=""/>
		<echo message=" See the comments inside the build.xml file for more details."/>
		<echo message=" -------------------------------------------------------------"/>
		<echo message=""/>
		<echo message=""/>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target
	 name="prepare"
	 depends="init"
	 description="Prepares the build directory"
	>
		<mkdir dir="${build.dir}"/>
		<echo message="Done"/>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->
	<target
	 name="prepare-src"
	 depends="prepare"
	 description="Prepares the source code"
	>
		<!-- create directories -->
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.dest}"/>
		<mkdir dir="${build.dest}/META-INF"/>
		<mkdir dir="${package.dir}"/>
		<mkdir dir="${dist.root}"/>
		<mkdir dir="${dist.dir}"/>

		<!-- copy src files -->
		<copy todir="${build.src}" overwrite="yes">
			<fileset 
            dir="${src.dir}"
            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip ">
			</fileset>
		</copy>

		<copy todir="${build.src}" overwrite="yes">
			<fileset 
  	            dir="${test.src.dir}"
  	        	includes="org/sbml/tolatex/**"
  	            excludes="**/.svn*, **/*.class, **/*~, **/*.tgz, **/*.zip ">
			</fileset>
		</copy>

		<copy todir="${build.src}" overwrite="yes">
			<fileset 
  	  	            dir="${resource.dir}"
  	  	        	includes="cz/** org/sbml/tolatex/**, **/*.properties"
  	  	            excludes="**/.svn*, **/*~, **/*.tgz, **/*.zip">
			</fileset>
		</copy>

	</target>


	<!-- =================================================================== -->
	<!-- Modify somes files                                                  -->
	<!-- =================================================================== -->
	<target name="gen-build-number" unless="dev.mode">
		<echo message="Updating the files with the build number..."/>

		<replace file="${basedir}/doc/Readme.html"
                token="[BUILD.NUMBER]"
                value="${build.name}" />


	</target>

	<!-- =================================================================== -->
	<!-- Modify back somes files                                             -->
	<!-- =================================================================== -->
	<target name="gen-build-number-back" depends="jar" unless="dev.mode">
		<echo message="Updating back the files with [BUILD.NUMBER]..."/>


		<replace file="${basedir}/doc/Readme.html"
                token="${build.name}"
                value="[BUILD.NUMBER]" />

	</target>


	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target
	 name="compile"
	 depends="prepare-src"
	 description="Compiles the source directory"
	>
		<javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           verbose="${verbose}"
           source="1.6"
           target="1.6"
           classpathref="classpath">
		</javac>
		<manifest file="${build.dest}/META-INF/MANIFEST.MF">
	        <attribute name="Main-Class" value="org.sbml.tolatex.SBML2LaTeX"/>
	        <attribute name="Built-By" value="${user.name}"/>
	      	<section name="${Name}">
	      	  <attribute name="Specification-Title"    value="${Name}"/>
	      	  <attribute name="Specification-Version"  value="${build.name}"/>
	      	  <attribute name="Specification-Vendor"   value="Center for Bioinformatics Tuebingen (ZBIT)"/>
	      	  <attribute name="Implementation-Title"   value="${Name}"/>
	      	  <attribute name="Implementation-Version" value="Revision ${repository.revision} ${TODAY}"/>
	          <attribute name="Implementation-Vendor"  value="University of Tuebingen"/>
	      	</section>
		</manifest>

	</target>


	<!-- =================================================================== -->
	<!-- Creates the class package                                           -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile">

		<copy todir="${build.dest}">
			<fileset dir="${build.src}" 
				includes="**/*.png **/*.gif **/*.xsd **/*.tmpl **/data/* **/*.xml **/*.cfg
					  **/*.obo **/*.properties **/*.pdf **/*.eps **/*.bbl **/*.tex"> <!-- **/*.java **/*.html ?? -->
			</fileset>
		</copy>
		<jar jarfile="${build.dir}/${name}-${version}.jar" basedir="${build.dest}" manifest="${build.dest}/META-INF/MANIFEST.MF"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target name="jar-src" depends="prepare-src">

		<jar jarfile="${build.dir}/${name}-${version}-src.jar" basedir="${build.src}" includes="**/*.java"/>

	</target>

	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- into a big jsbml jar file.                                          -->
	<!-- =================================================================== -->
	<target name="bigjar" depends="compile">

		<!-- we use the ${build.src} to include the sources of jsbml in the resulting jar -->
		<copy todir="${build.dest}">
			<fileset
            dir="${build.src}"
            includes="**/*.png **/*.gif **/*.xsd **/*.tmpl **/data/* **/*.xml **/*.cfg **/*.obo **/*.properties **/*.java" >
			</fileset>
		</copy>
		<jar jarfile="${build.dir}/${name}-${version}-with-dependencies.jar"
         basedir="${build.dest}"  manifest="${build.dest}/META-INF/MANIFEST.MF">
			<zipgroupfileset dir="${jars.dir}" includes="*.jar" />

		</jar>
	</target>
	
	<!-- =================================================================== -->
	<!-- Determines the current SVN revision number of the project           -->
	<!-- =================================================================== -->
	<target
	   name="svnrevision"
	   description="Determines the current SVN revions number of SBML2LaTeX and stores it in a variable."
	>
	  <exec executable="svn" outputproperty="svninfo.xml">
		<arg line="info --xml"/>
	  </exec>
	  <xmlproperty collapseAttributes="true">
	    <propertyresource name="svninfo.xml"/>
	  </xmlproperty>
	  <property name="repository.revision" value="${info.entry.revision}"/>
	</target>
	
	<!-- =================================================================== -->
	<!-- Creates a JAR file including all dependencies, but no source code   -->
	<!-- =================================================================== -->
	<target
	  name="jar_incl-libs"
	  depends="init, svnrevision, compile"
	  description="Creates a JAR file including all class files and all third-party libraries, but no source files.">
	  	
	  <delete file="${appJar}_v${version}_incl-libs.jar"/>
	  <jar
	     compress="true"
	     filesetmanifest="mergewithoutmain"
	     index="true"
	     indexMetaInf="true"
		 jarfile="${appJar}-${version}/${name}_v${version}_incl-libs.jar"
	     level="9"
	     manifest="${build.dest}/META-INF/MANIFEST.MF"
	     manifestencoding="utf-8"
	     strict="warn"
	     update="true"
	  >
	    	
	   <!-- SBML2LaTeX Classes -->
	   <fileset dir="${build.dest}">
	     <exclude name="**/package.html **/package-info.class"/>
	   </fileset>
	   <fileset dir="${basedir}"
	     includes="LICENSE.txt, README.txt"
	   />
	   <fileset dir="${build.src}"
	   	  includes="**/*.xml **.xml **/*.properties **.properties **/*.html **.html **/*.png **.png **/*.eps **.eps **/*.pdf **.pdf **/*.sty **.sty **/*.bbl **.bbl"
	   	  excludes="**/*.java **.java"
	   />
	   <fileset dir="${basedir}/licenses"
	     includes="AUTHORS.txt"
	   />
	      
	   <!-- These libraries are required by most classes -->
	   <zipfileset excludes="META-INF/**" src="${jars.dir}/zbit.jar"/>
	   <zipfileset excludes="META-INF/**" src="${jars.dir}/jsbml-1.0-a1-with-dependencies.jar"/>
	   <zipfileset excludes="META-INF/**" src="${jars.dir}/quaqua.jar"/>

	  </jar>
	  	
	</target>
	
	<!-- =================================================================== -->
	<!-- Creates a minimal JAR file                                          -->
	<!-- =================================================================== -->
	<target
	  name="jar_slim"
	  depends="init, svnrevision, compile"
	  description="Creates a minimal JAR file."
	>
	  
	  <jar
	  	 compress="true"
	  	 filesetmanifest="mergewithoutmain"
	  	 index="true"
	  	 indexMetaInf="true"
		 jarfile="${appJar}-${version}/${name}_v${version}_slim.jar"
	  	 level="9"
	     manifest="${build.dest}/META-INF/MANIFEST.MF"
	  	 manifestencoding="utf-8"
	  	 strict="warn"
	  	 update="true"
	  >
	     <!-- SBML2LaTeX Classes -->
	     <fileset
	  	    dir="${build.dest}"
	     	excludes="**/package.html, **/package-info.class, package-info.class"
	     />
	     <fileset
	     	dir="${basedir}"
	     	includes="LICENSE.txt, README.txt"
	     />
	     <fileset
	     	dir="${build.src}"
	  	    includes="**/*.xml, **.xml, **/*.properties, **.properties, **/*.html, **.html, **/*.png, **.png, **/*.eps, **.eps, **/*.pdf, **.pdf, **/*.sty, **.sty, **/*.bbl, **.bbl"
	  	    excludes="**/*.java, **.java, overview.html, **/package.html"
	     />
	     <fileset
	     	dir="${basedir}/licenses"
	        includes="AUTHORS.txt"
	     />
	 </jar>
   </target>
	

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target
    name="javadoc"
    depends="prepare-src, svnrevision"
    description="Creates Javadoc for ${Name}"
  >
    
    <property name="doc.location"   value="${doc}/version_${version}"/>
    <property name="icon.file.name" value="ICON_LATEX_48.png"/>
    
    <mkdir dir="${doc.location}"/>
    
    <javadoc
      access="protected"
      author="true"
      breakiterator="yes"
      classpathref="classpath"
      destdir="${doc}/version_${version}"
      doctitle="${Name} ${version}"
      excludepackagenames=""
      footer="Generated at ${TODAY}&lt;br/&gt;Version ${version} Revision ${repository.revision}"
      header="&lt;img src=&quot;resources/${icon.file.name}&quot;/&gt;"
      maxmemory="96m"
      nodeprecated="false"
      nodeprecatedlist="false"
      noindex="false"
      nonavbar="false"
      notree="false"
      packagenames="org.*"
      source="1.6"
      sourcepath="${build.src}"
      splitindex="true"
      stylesheetfile="${doc}/javadoc-style.css"
      overview="${src}/overview.html"
      use="true"
      version="true"
      windowtitle="${Name} ${version}"
    >
      <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
      <link href="http://www.biojava.org/docs/api17"/>
      <link href="http://sbml.org/Special/Software/JSBML/latest-stable/build/apidocs/"/>
      <tag name="sbml.deprecated" description="Deprecated in SBML since:"/>
      <tag name="jsbml.note" description="Note"/>
      <tag name="jsbml.warning"/>
      <tag name="doc.note" description="Documentation note"/>
      
    </javadoc>

    <!--
      This is a hack: Actually, the header doesn't allow us to place img
      tags; but we cheat by using HTML codes to hide it :-) This copies the
      icon to the right folder:
    -->
    <property name="icon.file.src" value="${resource.dir}/org/sbml/tolatex/gui/img/${icon.file.name}"/>
    <property name="icon.file.dest" value="${doc.location}/resources/${icon.file.name}"/>
    <echo message="Copying file ${icon.file.src} to file ${icon.file.dest}..."/>
    <copy file="${icon.file.src}" tofile="${icon.file.dest}"/>
    
  </target>

  <!-- =================================================================== -->
  <!-- Creates the javadocs jar package                                      -->
  <!-- =================================================================== -->
  <target
  	name="jar-javadoc"
  	depends="javadoc"
  >

    <jar jarfile="${build.dir}/${name}-${version}-javadoc.jar" basedir="${doc}/version_${version}" />

  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target
	name="dist"
  	depends="prepare-src"
  	description="Creates the distribution"
  >

    <!-- Creates the standard jar file -->

    <antcall target="clean"/>

    <antcall target="jar"/>
    <antcall target="jar-src"/>
    <copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-src.jar"/>

    <copy todir="${dist.dir}" file="${build.dir}/${name}-${version}.jar"/>
    <copy todir="${dist.root}" file="${build.dir}/${name}-${version}.jar"/>

    <!-- Creates the jar file including all the dependencies -->

    <antcall target="bigjar"/>

    <copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-with-dependencies.jar"/>
    <copy todir="${dist.root}" file="${build.dir}/${name}-${version}-with-dependencies.jar"/>

    <!-- Creates and copy the generated javadoc -->
    <antcall target="jar-javadoc"/>

    <copy todir="${dist.dir}/doc/api">
      <fileset dir="${doc}/version_${version}/" includes="**/*">
      </fileset>
    </copy>
    <copy todir="${dist.dir}" file="${build.dir}/${name}-${version}-javadoc.jar"/>

    <!-- Copy the source files -->
    <copy todir="${dist.dir}/src">
      <fileset dir="${build.src}/" includes="**/*">
      </fileset>
    </copy>

    <!-- Copy all the dependencies jar files -->
    <copy todir="${dist.dir}/lib">
      <fileset dir="${jars.dir}/" includes="*.jar">
      </fileset>
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir="${basedir}/" includes="LICENSE.txt NEWS.txt README AUTHORS.txt build.xml">
      </fileset>
    </copy>
    
    <copy todir="${dist.dir}/licenses">
      <fileset dir="${basedir}/licenses" includes="**/*">
      </fileset>
    </copy>

    <copy todir="${dist.dir}/doc">
      <fileset dir="${basedir}/doc" includes="**/*.pdf **/*.jpg **/*.java" excludes="posters/** publications/** templates/**">

      </fileset>
    </copy>

    <!-- Creates the archives to be distributed -->
    <zip basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.zip" includes="${name}-${version}/**"/>

    <!-- Not generating a tar.gz a having only a zip file should be enough -->
    <!-- <tar basedir="${dist.root}" destfile="${dist.root}/${name}-${version}.tar.gz" includes="${name}-${version}/**" compression="gzip"/> -->

  </target>


  <!-- =================================================================== -->
  <!-- Cleans everything                                                   -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete includeEmptyDirs="true" quiet="yes">
      <fileset dir="${build.dir}" includes="**/*"/>
    </delete>
    <delete dir="${dist.root}" includeEmptyDirs="true" quiet="yes">
    </delete>
  </target>

</project>

<!-- End of file -->
